from typing import Protocol, runtime_checkable, Any, Mapping

from binance import KLINE_INTERVAL_1DAY

from cryptobot.ports.binance_api_adapter import BinanceApiAdapterPort
from cryptobot.ports.binance_client_adapter import BinanceClientAdapterPort


@runtime_checkable
class BinanceGatewayPort(Protocol):

    def __init__(
            self,
            binance_client_adapter: BinanceClientAdapterPort,
            binance_api_adapter: BinanceApiAdapterPort,
    ): ...

    def get_open_orders(self) -> list[dict[str, Any]]: ...

    def get_all_orders(self, symbol: str) -> list[dict[str, Any]]: ...

    def get_order_by_binance_order_id(self, binance_order_id: int, binance_order_symbol: str) -> dict[str, Any]: ...

    def get_price_for_binance_symbol(self, binance_order_symbol: str) -> dict[str, Any]: ...

    def get_historical_klines(self, binance_order_symbol: str, period: str, interval: str = KLINE_INTERVAL_1DAY) -> list: ...

    def get_asset_balance(self, asset=None) -> dict[str, Any]: ...

    def get_symbol_info(self, symbol: str) -> dict[str, Any]: ...

    def create_test_order(self, **params: Any) -> dict[str, Any]: ...

    def create_order(self, **params: Any) -> dict[str, Any]: ...

    def get_all_trades(self, binance_symbol: str) -> list[dict]: ...

    """
    Get internal transfers history (Spot-to-Funding and vise-versa).
    transfer_type: MAIN_FUNDING, FUNDING_MAIN, MAIN_UMFUTURE, ...
    """
    def get_asset_transfer(self, type, start_time=None, end_time=None, limit=100): ...

    def get_asset_ledger(self, asset=None, start_time=None, end_time=None, limit=500): ...